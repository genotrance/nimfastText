[n.global]
output = nimfastText

[n.include]
nimfastText/src

[n.exclude]
to_cstring.cc
to_cstring.h

[n.prepare]
gitcheckout = 0.2.0
gitremote = "https://github.com/facebookresearch/fastText"
gitsparse = """
src/*
"""

[n.wildcard]
wildcard = *.h

search.1 = "enum class"
replace.1 = enum

regex.2 = """: [a-z0-9_]+ \{"""
replace.2 = "{"

regex.3 = """([A-Za-z&]+ operator=)"""
replace.3 = "//$1"

search.4 = " = delete"
replace.4 = ""

search.5 = "((__deprecated__"
comment.5 = 1

regex.6 = """([u]?int[\d]+)_t"""
replace.6 = "$1"

search.7 = " = default"
replace.7 = ""

search.8 = "std::ostream& operator<<"
comment.8 = 1

search.9 = "_{};"
replace.9 = "_;"

search.n = "noexcept"
replace.n = ""

search.o = "override"
replace.o = ""

wildcard.2 = *.nim

search.11 = "vector["
replace.11 = "vect["

search.12 = "import nimfastText/real"
replace.12 = ""

search.13 = real
replace.13 = cfloat

search.14 = Predictions
replace.14 = "vect[pair[cfloat, int32]]"

[nimfastText/src/to_cstring.cc]
create = """
#include "to_cstring.h"
char*  toCstring( const std::string& s ) {
  std::vector<char> v(s.size()+1);
  memcpy( &v.front(), s.c_str(), s.size() + 1 );
  return v.data();
};
"""

[nimfastText/src/to_cstring.h]
create = """
#include <string>
#include <vector>
#include <cstring>

char*  toCstring( const std::string& s );
"""

[utils.h]
search.1 = "const T& value) {"
replace.1 = "const T& value);"

search.2 = "  return"
comment.2 = 3

preprocess = true
flags = "--stdcall --cpp --suffix:_"
ppflags = "-std=gnu++11"

[fasttext.h]
preprocess = true
defines = true
recurse = true
flags = "--stdcall --cpp --suffix:_"
ppflags = "-std=gnu++11"

compile = nimfastText/src
pragma-lin.1 = "passC: \"-std=gnu++11\""
pragma-lin.2 = "passL: \"-lpthread\""
pragma-mac = "passC: \"-std=gnu++11\""

[args.nim]
search.0 = string
replace.0 = std_string

prepend = """type
  vect {.importc: "std::vector", header: "<vector>".}[T] = object
  ostream {.importc: "std::ostream", header: "<ostream>".} = object
  istream {.importc: "std::istream", header: "<istream>".} = object
  std_string {.importc: "std::string", header: "<string>".} = object
"""

[dictionary.nim]
search.0 = string
replace.0 = std_string

prepend = """type
  vect {.importc: "std::vector", header: "<vector>".}[T] = object
  ostream {.importc: "std::ostream", header: "<ostream>".} = object
  istream {.importc: "std::istream", header: "<istream>".} = object
  shared_ptr {.importc: "std::shared_ptr", header: "<memory>".}[T] = object
  minstd_rand {.importc: "std::minstd_rand", header: "<random>".} = object
  std_string {.importc: "std::string", header: "<string>".} = object
"""

search.1 = nullptr
replace.1 = nil

search.2 = "__get_nil_t()"
replace.2 = nil

[matrix.nim]
prepend = """type
  ostream {.importc: "std::ostream", header: "<ostream>".} = object
  istream {.importc: "std::istream", header: "<istream>".} = object
  Vector = object
"""

search = "bycopy.} = object"
replace = "bycopy.} = object of RootObj"

[vector.nim]
prepend = """type
  ostream {.importc: "std::ostream", header: "<ostream>".} = object
  Matrix = object
  QMatrix = object
"""

[productquantizer.nim]
prepend = """type
  ostream {.importc: "std::ostream", header: "<ostream>".} = object
  istream {.importc: "std::istream", header: "<istream>".} = object
"""

[qmatrix.nim]
prepend = """type
  ostream {.importc: "std::ostream", header: "<ostream>".} = object
  istream {.importc: "std::istream", header: "<istream>".} = object
"""

[meter.nim]
prepend = """type
  ostream {.importc: "std::ostream", header: "<ostream>".} = object
  vect {.importc: "std::vector", header: "<vector>".}[T] = object
  pair {.importc: "std::pair", header: "<utility>".}[T, U] = object
"""

[model.nim]
prepend = """type
  shared_ptr {.importc: "std::shared_ptr", header: "<memory>".}[T] = object
  minstd_rand {.importc: "std::minstd_rand", header: "<random>".} = object
  vect {.importc: "std::vector", header: "<vector>".}[T] = object
  pair {.importc: "std::pair", header: "<utility>".}[T, U] = object
"""

search = "discard \"forward decl of Loss\""
replace = "type Loss {.bycopy.} = object"

[utils.nim]
prepend = """type
  ifstream {.importc: "std::ifstream", header: "<fstream>".} = object
  vect {.importc: "std::vector", header: "<vector>".}[T] = object
  pair {.importc: "std::pair", header: "<utility>".}[T, U] = object
"""

search = nil
replace = ""

[densematrix.nim]
prepend = """type
  ostream {.importc: "std::ostream", header: "<ostream>".} = object
  istream {.importc: "std::istream", header: "<istream>".} = object
  Vector = object
"""

[fasttext.nim]
search.0 = " string"
replace.0 = " std_string"

prepend = """type
  shared_ptr {.importc: "std::shared_ptr", header: "<memory>".}[T] = object
  ostream {.importc: "std::ostream", header: "<ostream>".} = object
  istream {.importc: "std::istream", header: "<istream>".} = object
  istringstream* {.importc: "std::istringstream", header: "<sstream>".} = object

  vect* {.importcpp: "std::vector", header: "<vector>".}[T] = object
  `tuple` {.importc: "std::tuple", header: "<tuple>".}[T, U, V] = object
  pair* {.importcpp: "std::pair", header: "<utility>".}[T, U] = object
    first*:T
    second*:U
  std_set {.importc: "std::set", header: "<set>".}[T] = object
  std_string* {.importc: "std::string", header: "<string>".} = object

proc constructStdString*(s: cstring): std_string {.importcpp: "std::string(@)", constructor, header: "<string>".}
proc constructStdIStringStream*(s: std_string): istringstream {.importcpp: "std::istringstream(@)", constructor, header: "<sstream>".}
template `[]=`*[T](v: var vect[T], key: int, val: T) =
  {.emit: [v, "[", key, "] = ", val, ";"].}
proc `[]`*[T](v: var vect[T], key: int): T {.importcpp: "(#[#])", nodecl.}
"""

search.7 = "const headerfasttext = sourcePath & \"/src/fasttext.h\""
replace.7 = """
const headerfasttext = sourcePath & "/src/fasttext.h"
const headerto_cstring = sourcePath & "/src/to_cstring.h"
proc toCstring*(s: std_string):cstring{.importcpp:"::toCstring(@)",header:headerto_cstring.}
converter toString*(x:std_string):string =
  $toCstring(x)
"""

search.3 = "set["
replace.3 = "std_set["

search.4 = "{.compile: \"nimfastText/src/main.cc\".}"
comment.4 = 1

search.5 = "var istream"
replace.5 = "var istringstream"

[n.post]
reset = true
